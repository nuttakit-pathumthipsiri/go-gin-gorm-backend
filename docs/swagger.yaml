basePath: /
definitions:
  model.BadRequestError:
    description: Bad Request error response
    properties:
      error:
        example: Invalid request data
        type: string
    type: object
  model.CreateTopicDetailRequest:
    description: Topic detail request object
    properties:
      name:
        description: ชื่อ topic_detail
        example: ยาแก้ปวด
        type: string
    required:
    - name
    type: object
  model.CreateTopicRequest:
    description: Topic request object
    properties:
      name:
        description: ชื่อ topic
        example: ยา
        type: string
    required:
    - name
    type: object
  model.InternalServerError:
    description: Internal Server Error response
    properties:
      error:
        example: Internal server error occurred
        type: string
    type: object
  model.NotFoundError:
    description: Not Found error response
    properties:
      error:
        example: Resource not found
        type: string
    type: object
  model.Topic:
    description: Topic entity
    properties:
      created_at:
        description: วันที่สร้าง
        example: "2024-01-01T00:00:00Z"
        type: string
      created_by:
        description: ผู้สร้าง
        example: admin
        type: string
      id:
        example: 1
        type: integer
      name:
        description: ชื่อ topic
        example: ยา
        type: string
      order:
        description: ลำดับ topic
        example: 1
        type: integer
      updated_at:
        description: วันที่อัพเดท
        example: "2024-01-01T00:00:00Z"
        type: string
      updated_by:
        description: ผู้อัพเดท
        example: admin
        type: string
    required:
    - created_by
    - name
    - order
    type: object
  model.TopicDetail:
    description: Topic detail entity
    properties:
      created_at:
        description: วันที่สร้าง
        example: "2024-01-01T00:00:00Z"
        type: string
      created_by:
        description: ผู้สร้าง
        example: admin
        type: string
      id:
        example: 1
        type: integer
      name:
        description: ชื่อ topic_detail
        example: ยาแก้ปวด
        type: string
      order:
        description: ลำดับ topic_detail
        example: 1
        type: integer
      topic:
        $ref: '#/definitions/model.Topic'
      topic_id:
        description: รหัส topic
        example: 1
        type: integer
      updated_at:
        description: วันที่อัพเดท
        example: "2024-01-01T00:00:00Z"
        type: string
      updated_by:
        description: ผู้อัพเดท
        example: admin
        type: string
    required:
    - created_by
    - name
    - order
    type: object
  model.UpdateTopicDetailRequest:
    description: Update topic detail request object
    properties:
      name:
        description: ชื่อ topic_detail (optional)
        example: ยาแก้ปวด
        type: string
      order:
        description: ลำดับ topic_detail (optional)
        example: 1
        type: integer
    type: object
  model.UpdateTopicRequest:
    properties:
      name:
        description: ชื่อ topic (optional)
        example: ยา
        type: string
      order:
        description: ลำดับ topic (optional)
        example: 1
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A RESTful API for managing topics and topic details using Go, Gin,
    and GORM
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Gin GORM Backend API
  version: "1.0"
paths:
  /details/{id}:
    delete:
      parameters:
      - description: Topic Detail ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Delete a topic detail
      tags:
      - topic-details
    get:
      parameters:
      - description: Topic Detail ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TopicDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.NotFoundError'
      summary: Get a topic detail by ID
      tags:
      - topic-details
    put:
      consumes:
      - application/json
      parameters:
      - description: Topic Detail ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Topic Detail object
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/model.UpdateTopicDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TopicDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.NotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Update a topic detail
      tags:
      - topic-details
  /topics:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Topic'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Get all topics
      tags:
      - topics
    post:
      consumes:
      - application/json
      parameters:
      - description: Topic request object
        in: body
        name: topic
        required: true
        schema:
          $ref: '#/definitions/model.CreateTopicRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Topic'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Create a new topic
      tags:
      - topics
  /topics/{id}:
    delete:
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Delete a topic
      tags:
      - topics
    get:
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Topic'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.NotFoundError'
      summary: Get a topic by ID
      tags:
      - topics
    put:
      consumes:
      - application/json
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Topic request object
        in: body
        name: topic
        required: true
        schema:
          $ref: '#/definitions/model.UpdateTopicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Topic'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.NotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Update a topic
      tags:
      - topics
  /topics/{id}/details:
    get:
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TopicDetail'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Get all details for a topic
      tags:
      - topic-details
    post:
      consumes:
      - application/json
      parameters:
      - description: Topic ID
        in: path
        name: id
        required: true
        type: string
      - description: Topic Detail object
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/model.CreateTopicDetailRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.TopicDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.BadRequestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Create a new topic detail
      tags:
      - topic-details
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
