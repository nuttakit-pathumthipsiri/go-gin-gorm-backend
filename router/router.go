package router

import (
	"go-gin-gorm-backend/handler"
	"go-gin-gorm-backend/middleware"

	_ "go-gin-gorm-backend/docs" // This is generated by swag

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func SetupRouter(topicHandler *handler.TopicHandler, topicDetailHandler *handler.TopicDetailHandler, authHandler *handler.AuthHandler) *gin.Engine {
	r := gin.Default()

	// Swagger documentation endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Public routes (no authentication required)
	auth := r.Group("/auth")
	{
		auth.POST("/login", authHandler.Login)
	}

	// Protected routes (authentication required)
	protected := r.Group("/")
	protected.Use(middleware.AuthMiddleware())
	{
		// Topic routes (protected)
		topic := protected.Group("/topics")
		{
			topic.GET("", topicHandler.GetAllTopics)
			topic.POST("", topicHandler.CreateTopic)
			topic.GET(":id", topicHandler.GetTopicByID)
			topic.PUT(":id", topicHandler.UpdateTopic)
			topic.DELETE(":id", topicHandler.DeleteTopic)

			topic.GET(":id/details", topicDetailHandler.GetAllDetailsByTopicID)
			topic.POST(":id/details", topicDetailHandler.CreateTopicDetail)
		}

		// Detail routes (protected)
		detail := protected.Group("/details")
		{
			detail.GET(":id", topicDetailHandler.GetDetailByID)
			detail.PUT(":id", topicDetailHandler.UpdateTopicDetail)
			detail.DELETE(":id", topicDetailHandler.DeleteTopicDetail)
		}
	}

	return r
}
